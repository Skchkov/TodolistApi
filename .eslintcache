[{"D:\\Coding\\React\\Todolist\\my-app\\src\\index.tsx":"1","D:\\Coding\\React\\Todolist\\my-app\\src\\reportWebVitals.ts":"2","D:\\Coding\\React\\Todolist\\my-app\\src\\app\\store.ts":"3","D:\\Coding\\React\\Todolist\\my-app\\src\\app\\App.tsx":"4","D:\\Coding\\React\\Todolist\\my-app\\src\\app\\app-reducer.ts":"5","D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\tasks-reducer.ts":"6","D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\todolists-reducer.ts":"7","D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\TodolistsList.tsx":"8","D:\\Coding\\React\\Todolist\\my-app\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"9","D:\\Coding\\React\\Todolist\\my-app\\src\\utils\\error-utils.ts":"10","D:\\Coding\\React\\Todolist\\my-app\\src\\api\\todolists-api.ts":"11","D:\\Coding\\React\\Todolist\\my-app\\src\\components\\AddItemForm\\AddItemForm.tsx":"12","D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"13","D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"14","D:\\Coding\\React\\Todolist\\my-app\\src\\components\\EditableSpan\\EditableSpan.tsx":"15","D:\\Coding\\React\\Todolist\\my-app\\src\\features\\Login\\Login.tsx":"16","D:\\Coding\\React\\Todolist\\my-app\\src\\features\\Login\\auth-reducer.ts":"17"},{"size":759,"mtime":1623945278980,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1607869388000,"results":"20","hashOfConfig":"19"},{"size":1198,"mtime":1623952340409,"results":"21","hashOfConfig":"19"},{"size":3228,"mtime":1623959550903,"results":"22","hashOfConfig":"19"},{"size":2914,"mtime":1623959712291,"results":"23","hashOfConfig":"19"},{"size":5633,"mtime":1596722126000,"results":"24","hashOfConfig":"25"},{"size":4585,"mtime":1597327450000,"results":"26","hashOfConfig":"19"},{"size":4546,"mtime":1623955499370,"results":"27","hashOfConfig":"19"},{"size":1092,"mtime":1596716576000,"results":"28","hashOfConfig":"25"},{"size":811,"mtime":1596719330000,"results":"29","hashOfConfig":"19"},{"size":3388,"mtime":1623959443146,"results":"30","hashOfConfig":"19"},{"size":1595,"mtime":1596715562000,"results":"31","hashOfConfig":"25"},{"size":4193,"mtime":1596715250000,"results":"32","hashOfConfig":"25"},{"size":1773,"mtime":1596295538000,"results":"33","hashOfConfig":"19"},{"size":952,"mtime":1594154724000,"results":"34","hashOfConfig":"19"},{"size":4438,"mtime":1623955551894,"results":"35","hashOfConfig":"19"},{"size":1630,"mtime":1623953188322,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"sjtphk",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},"18ms8cc",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Coding\\React\\Todolist\\my-app\\src\\index.tsx",[],["77","78"],"D:\\Coding\\React\\Todolist\\my-app\\src\\reportWebVitals.ts",[],"D:\\Coding\\React\\Todolist\\my-app\\src\\app\\store.ts",[],"D:\\Coding\\React\\Todolist\\my-app\\src\\app\\App.tsx",["79"],"import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { Menu } from \"@material-ui/icons\";\r\nimport { TodolistsList } from \"../features/TodolistsList/TodolistsList\";\r\nimport { ErrorSnackbar } from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"./store\";\r\nimport { initializeAppTC, logoutTC, RequestStatusType } from \"./app-reducer\";\r\nimport { Login } from \"../features/Login/Login\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean;\r\n};\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n    const dispatch = useDispatch();\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(\r\n        (state) => state.app.status\r\n    );\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(\r\n        (state) => state.app.isInitialized\r\n    );\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.auth.isLoggedIn;\r\n    });\r\n\r\n    const logoutHandler = () => {\r\n        //dispatch logout thunk\r\n        dispatch(logoutTC());\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC());\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: \"fixed\",\r\n                    top: \"30%\",\r\n                    textAlign: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <CircularProgress />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">News</Typography>\r\n                    {isLoggedIn && (\r\n                        <Button onClick={logoutHandler} color=\"inherit\">\r\n                            Logout\r\n                        </Button>\r\n                    )}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path={\"/\"}\r\n                        render={() => <TodolistsList demo={demo} />}\r\n                    />\r\n                    <Route exact path={\"/login\"} render={() => <Login />} />\r\n                    <Route\r\n                        path={\"/404\"}\r\n                        render={() => (\r\n                            <h1 style={{ textAlign: \"center\" }}>\r\n                                404: PAGE NOT FOUND\r\n                            </h1>\r\n                        )}\r\n                    />\r\n                    <Redirect from={\"*\"} to={\"/404\"} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","D:\\Coding\\React\\Todolist\\my-app\\src\\app\\app-reducer.ts",[],"D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\tasks-reducer.ts",["80","81"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n",["82","83"],"D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\todolists-reducer.ts",["84"],"D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\TodolistsList.tsx",[],"D:\\Coding\\React\\Todolist\\my-app\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\Coding\\React\\Todolist\\my-app\\src\\utils\\error-utils.ts",[],"D:\\Coding\\React\\Todolist\\my-app\\src\\api\\todolists-api.ts",[],"D:\\Coding\\React\\Todolist\\my-app\\src\\components\\AddItemForm\\AddItemForm.tsx",["85","86","87"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["88","89","90","91","92","93"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\Coding\\React\\Todolist\\my-app\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["94","95","96"],"D:\\Coding\\React\\Todolist\\my-app\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\Coding\\React\\Todolist\\my-app\\src\\features\\Login\\Login.tsx",["97"],"D:\\Coding\\React\\Todolist\\my-app\\src\\features\\Login\\auth-reducer.ts",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":45,"column":8,"nodeType":"104","endLine":45,"endColumn":10,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":5,"column":9,"nodeType":"108","messageId":"109","endLine":5,"endColumn":22},{"ruleId":"110","severity":1,"message":"111","line":13,"column":94,"nodeType":"112","messageId":"113","endLine":13,"endColumn":96},{"ruleId":"98","replacedBy":"114"},{"ruleId":"100","replacedBy":"115"},{"ruleId":"110","severity":1,"message":"111","line":10,"column":45,"nodeType":"112","messageId":"113","endLine":10,"endColumn":47},{"ruleId":"106","severity":1,"message":"116","line":2,"column":9,"nodeType":"108","messageId":"109","endLine":2,"endColumn":12},{"ruleId":"106","severity":1,"message":"117","line":2,"column":14,"nodeType":"108","messageId":"109","endLine":2,"endColumn":20},{"ruleId":"106","severity":1,"message":"118","line":2,"column":22,"nodeType":"108","messageId":"109","endLine":2,"endColumn":33},{"ruleId":"102","severity":1,"message":"119","line":35,"column":8,"nodeType":"104","endLine":35,"endColumn":10,"suggestions":"120"},{"ruleId":"102","severity":1,"message":"121","line":39,"column":8,"nodeType":"104","endLine":39,"endColumn":42,"suggestions":"122"},{"ruleId":"102","severity":1,"message":"121","line":46,"column":8,"nodeType":"104","endLine":46,"endColumn":54,"suggestions":"123"},{"ruleId":"102","severity":1,"message":"121","line":48,"column":95,"nodeType":"104","endLine":48,"endColumn":134,"suggestions":"124"},{"ruleId":"102","severity":1,"message":"121","line":49,"column":101,"nodeType":"104","endLine":49,"endColumn":140,"suggestions":"125"},{"ruleId":"102","severity":1,"message":"121","line":50,"column":107,"nodeType":"104","endLine":50,"endColumn":146,"suggestions":"126"},{"ruleId":"102","severity":1,"message":"121","line":15,"column":97,"nodeType":"104","endLine":15,"endColumn":130,"suggestions":"127"},{"ruleId":"102","severity":1,"message":"121","line":20,"column":8,"nodeType":"104","endLine":20,"endColumn":41,"suggestions":"128"},{"ruleId":"102","severity":1,"message":"121","line":24,"column":8,"nodeType":"104","endLine":24,"endColumn":41,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":75,"column":37,"nodeType":"132","endLine":75,"endColumn":54},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["135"],"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["133"],["134"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["136"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["137"],["138"],["139"],["140"],["141"],["142"],["143"],["144"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"149","fix":"151"},{"desc":"149","fix":"152"},{"desc":"149","fix":"153"},{"desc":"149","fix":"154"},{"desc":"149","fix":"155"},{"desc":"149","fix":"156"},{"desc":"149","fix":"157"},"Update the dependencies array to be: [dispatch]",{"range":"158","text":"159"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"160","text":"161"},"Update the dependencies array to be: [props]",{"range":"162","text":"163"},{"range":"164","text":"163"},{"range":"165","text":"163"},{"range":"166","text":"163"},{"range":"167","text":"163"},{"range":"168","text":"163"},{"range":"169","text":"163"},{"range":"170","text":"163"},[1391,1393],"[dispatch]",[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],"[props]",[1846,1892],[1991,2030],[2133,2172],[2281,2320],[765,798],[1071,1104],[1261,1294]]